{
    "name": "FXHedgeContract",
    "structs": {},
    "methods": [
        {
            "name": "create_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "baseline_rate"
                },
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new FX hedging contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_premium",
            "args": [
                {
                    "type": "uint64",
                    "name": "notional_amount"
                },
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate the premium amount using a sophisticated insurance formula\nIn deployment, these values will be adaptive and estimated from historical data of the user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "simulate_settlement",
            "args": [
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "actual_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Simulate contract settlement based on rates",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_payout",
            "args": [
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "actual_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate the payout amount if contract succeeds",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_summary",
            "args": [
                {
                    "type": "uint64",
                    "name": "baseline_rate"
                },
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get a summary of contract parameters",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "convert_rate_to_decimal",
            "args": [
                {
                    "type": "uint64",
                    "name": "rate_scaled"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper method to convert scaled rate back to decimal representation",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "FX Hedging Smart Contract for SME currency risk management - Updated with sophisticated premium calculation",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        281
                    ],
                    "errorMessage": "Baseline rate must be positive"
                },
                {
                    "pc": [
                        290
                    ],
                    "errorMessage": "Duration must be positive"
                },
                {
                    "pc": [
                        287
                    ],
                    "errorMessage": "Notional amount must be positive"
                },
                {
                    "pc": [
                        73,
                        94,
                        134,
                        163,
                        199,
                        228
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        284
                    ],
                    "errorMessage": "Target rate must be positive"
                },
                {
                    "pc": [
                        273
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        76,
                        97,
                        137,
                        166,
                        202,
                        231
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAQCQTiYBBBUffHUxG0EA9oIGBNZIVxgEcjcT0wRJ/ixGBAjHchkEek5wowRphO4fNhoAjgYAnQCAAFwAPwAXAAIjQzEZFEQxGEQ2GgEXiAI7FihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiAHiSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBFzYaAhc2GgMXiAGjFihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAQxJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAHMWKExQsCJDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIABlJFRZXBgJMUChMULAiQzEZQP82MRgURCJDigQBi/xEi/1Ei/5Ei/9Ei/6L/Iv/iAAhSIAdQ29udHJhY3QgY3JlYXRlZCBzdWNjZXNzZnVsbHmJigMBgABHA4v/JAuB7QIKSUAAGSOL/YH0HAuBxBMLC4v+C4GAyK+gJQqMAIkijACLBIwCiwCLAg5BADWLAIsCCIECCkmMAUkLSYwDiwQSQQAFiwFC/76LA4sEDEEACYsBIgiMAEL/zIsBIgmMAkL/w4sCQv+figMBi/6L/Q5BADqAN0NvbnRyYWN0IHdvdWxkIGZhaWwgLSByYXRlIGRpZCBub3QgaW1wcm92ZSBzdWZmaWNpZW50bHmJgDJDb250cmFjdCB3b3VsZCBzdWNjZWVkIC0gcmF0ZSBpbXByb3ZlZCBhcyBleHBlY3RlZImKAwGL/ov9DkEAAiOJi/6L/QmL/wuL/SQLComKBAGL/ov8i/+I/upIgChDb250cmFjdCBzdW1tYXJ5IGNhbGN1bGF0ZWQgc3VjY2Vzc2Z1bGx5iYoBAYv/JAqJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}