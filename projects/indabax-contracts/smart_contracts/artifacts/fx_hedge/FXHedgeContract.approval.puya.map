{
  "version": 3,
  "sources": [
    "../../fx_hedge/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAiFK;;AAAA;AAAA;AAAA;;AAAA;AAjFL;;;AAAA;AAiFK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAkDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAgCK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA3BL;;;AAAA;AA2BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAHL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAGK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAHL;;AAAA;;;;;;;;;AAGA;;;AAUQ;;AAAA;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AASO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAER;;;AAGe;;AAAkB;;AAAlB;AAAuB;;AAAvB;AAAP;AAER;;;AAQW;;AAAA;;AAAA;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAOO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEZ;;;AAQW;;AAAA;;AAAA;AAAX;;;AACmB;AAAP;AAGJ;;AAAA;;AAAmB;AAEnB;;AAAoC;AAAlB;AACR;AAAwC;;AAAc;AAAd;AAAzC;AAET;AAcR;;;AAIe;;AAAe;AAAf;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 10000 0"
    },
    "7": {
      "op": "bytecblock 0x151f7c75"
    },
    "14": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "19": {
      "op": "pushbytess 0xd6485718 0x16f7e824 0x49fe2c46 0x08c77219 0x7a4e70a3 0x6984ee1f // method \"create_contract(uint64,uint64,uint64,uint64)string\", method \"calculate_premium(uint64)uint64\", method \"simulate_settlement(uint64,uint64,uint64)string\", method \"calculate_payout(uint64,uint64,uint64)uint64\", method \"get_contract_summary(uint64,uint64,uint64,uint64)string\", method \"convert_rate_to_decimal(uint64)uint64\"",
      "defined_out": [
        "Method(calculate_payout(uint64,uint64,uint64)uint64)",
        "Method(calculate_premium(uint64)uint64)",
        "Method(convert_rate_to_decimal(uint64)uint64)",
        "Method(create_contract(uint64,uint64,uint64,uint64)string)",
        "Method(get_contract_summary(uint64,uint64,uint64,uint64)string)",
        "Method(simulate_settlement(uint64,uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(create_contract(uint64,uint64,uint64,uint64)string)",
        "Method(calculate_premium(uint64)uint64)",
        "Method(simulate_settlement(uint64,uint64,uint64)string)",
        "Method(calculate_payout(uint64,uint64,uint64)uint64)",
        "Method(get_contract_summary(uint64,uint64,uint64,uint64)string)",
        "Method(convert_rate_to_decimal(uint64)uint64)"
      ]
    },
    "51": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculate_payout(uint64,uint64,uint64)uint64)",
        "Method(calculate_premium(uint64)uint64)",
        "Method(convert_rate_to_decimal(uint64)uint64)",
        "Method(create_contract(uint64,uint64,uint64,uint64)string)",
        "Method(get_contract_summary(uint64,uint64,uint64,uint64)string)",
        "Method(simulate_settlement(uint64,uint64,uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_contract(uint64,uint64,uint64,uint64)string)",
        "Method(calculate_premium(uint64)uint64)",
        "Method(simulate_settlement(uint64,uint64,uint64)string)",
        "Method(calculate_payout(uint64,uint64,uint64)uint64)",
        "Method(get_contract_summary(uint64,uint64,uint64,uint64)string)",
        "Method(convert_rate_to_decimal(uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "54": {
      "op": "match main_create_contract_route@3 main_calculate_premium_route@4 main_simulate_settlement_route@5 main_calculate_payout_route@6 main_get_contract_summary_route@7 main_convert_rate_to_decimal_route@8",
      "stack_out": []
    },
    "68": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "69": {
      "op": "return",
      "stack_out": []
    },
    "70": {
      "block": "main_convert_rate_to_decimal_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "73": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "74": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "76": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "77": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "80": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "81": {
      "callsub": "smart_contracts.fx_hedge.contract.FXHedgeContract.convert_rate_to_decimal",
      "op": "callsub convert_rate_to_decimal",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "84": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "85": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "88": {
      "op": "log",
      "stack_out": []
    },
    "89": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_get_contract_summary_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "97": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "98": {
      "op": "pushbytes 0x151f7c750028436f6e74726163742073756d6d6172792063616c63756c61746564207375636365737366756c6c79",
      "defined_out": [
        "0x151f7c750028436f6e74726163742073756d6d6172792063616c63756c61746564207375636365737366756c6c79"
      ],
      "stack_out": [
        "0x151f7c750028436f6e74726163742073756d6d6172792063616c63756c61746564207375636365737366756c6c79"
      ]
    },
    "146": {
      "op": "log",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "block": "main_calculate_payout_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "151": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "152": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "153": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "155": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "156": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "160": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "167": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "168": {
      "callsub": "smart_contracts.fx_hedge.contract.FXHedgeContract.calculate_payout",
      "op": "callsub calculate_payout",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "172": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "175": {
      "op": "log",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "block": "main_simulate_settlement_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "180": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "184": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "185": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "188": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "192": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "196": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "197": {
      "callsub": "smart_contracts.fx_hedge.contract.FXHedgeContract.simulate_settlement",
      "op": "callsub simulate_settlement",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "201": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "202": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "203": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "208": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "211": {
      "op": "log",
      "stack_out": []
    },
    "212": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "return",
      "stack_out": []
    },
    "214": {
      "block": "main_calculate_premium_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "216": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "217": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "218": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "220": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "221": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "224": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "225": {
      "callsub": "smart_contracts.fx_hedge.contract.FXHedgeContract.calculate_premium",
      "op": "callsub calculate_premium",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "228": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "229": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "230": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "231": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "232": {
      "op": "log",
      "stack_out": []
    },
    "233": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "return",
      "stack_out": []
    },
    "235": {
      "block": "main_create_contract_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "237": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "238": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "239": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "241": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "242": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "245": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "246": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "249": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "250": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "254": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "257": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "258": {
      "callsub": "smart_contracts.fx_hedge.contract.FXHedgeContract.create_contract",
      "op": "callsub create_contract",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "262": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "263": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "264": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "269": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "270": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "272": {
      "op": "log",
      "stack_out": []
    },
    "273": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return",
      "stack_out": []
    },
    "275": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "277": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "282": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "283": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "284": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "285": {
      "op": "return",
      "stack_out": []
    },
    "286": {
      "subroutine": "smart_contracts.fx_hedge.contract.FXHedgeContract.create_contract",
      "params": {
        "baseline_rate#0": "uint64",
        "target_rate#0": "uint64",
        "notional_amount#0": "uint64",
        "duration_days#0": "uint64"
      },
      "block": "create_contract",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "289": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseline_rate#0 (copy)"
      ],
      "stack_out": [
        "baseline_rate#0 (copy)"
      ]
    },
    "291": {
      "error": "Baseline rate must be positive",
      "op": "assert // Baseline rate must be positive",
      "stack_out": []
    },
    "292": {
      "op": "frame_dig -3",
      "defined_out": [
        "target_rate#0 (copy)"
      ],
      "stack_out": [
        "target_rate#0 (copy)"
      ]
    },
    "294": {
      "error": "Target rate must be positive",
      "op": "assert // Target rate must be positive",
      "stack_out": []
    },
    "295": {
      "op": "frame_dig -2",
      "defined_out": [
        "notional_amount#0 (copy)"
      ],
      "stack_out": [
        "notional_amount#0 (copy)"
      ]
    },
    "297": {
      "error": "Notional amount must be positive",
      "op": "assert // Notional amount must be positive",
      "stack_out": []
    },
    "298": {
      "op": "frame_dig -1",
      "defined_out": [
        "duration_days#0 (copy)"
      ],
      "stack_out": [
        "duration_days#0 (copy)"
      ]
    },
    "300": {
      "error": "Duration must be positive",
      "op": "assert // Duration must be positive",
      "stack_out": []
    },
    "301": {
      "op": "pushbytes \"Contract created successfully\"",
      "defined_out": [
        "\"Contract created successfully\""
      ],
      "stack_out": [
        "\"Contract created successfully\""
      ]
    },
    "332": {
      "retsub": true,
      "op": "retsub"
    },
    "333": {
      "subroutine": "smart_contracts.fx_hedge.contract.FXHedgeContract.calculate_premium",
      "params": {
        "notional_amount#0": "uint64"
      },
      "block": "calculate_premium",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "336": {
      "op": "frame_dig -1",
      "defined_out": [
        "notional_amount#0 (copy)"
      ],
      "stack_out": [
        "notional_amount#0 (copy)"
      ]
    },
    "338": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "notional_amount#0 (copy)"
      ],
      "stack_out": [
        "notional_amount#0 (copy)",
        "3"
      ]
    },
    "340": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "341": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "100"
      ]
    },
    "343": {
      "op": "/",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "344": {
      "retsub": true,
      "op": "retsub"
    },
    "345": {
      "subroutine": "smart_contracts.fx_hedge.contract.FXHedgeContract.simulate_settlement",
      "params": {
        "target_rate#0": "uint64",
        "actual_rate#0": "uint64",
        "notional_amount#0": "uint64"
      },
      "block": "simulate_settlement",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "348": {
      "op": "frame_dig -2",
      "defined_out": [
        "actual_rate#0 (copy)"
      ],
      "stack_out": [
        "actual_rate#0 (copy)"
      ]
    },
    "350": {
      "op": "frame_dig -3",
      "defined_out": [
        "actual_rate#0 (copy)",
        "target_rate#0 (copy)"
      ],
      "stack_out": [
        "actual_rate#0 (copy)",
        "target_rate#0 (copy)"
      ]
    },
    "352": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "bz simulate_settlement_else_body@2",
      "stack_out": []
    },
    "356": {
      "op": "pushbytes \"Contract would fail - rate did not improve sufficiently\"",
      "defined_out": [
        "\"Contract would fail - rate did not improve sufficiently\""
      ],
      "stack_out": [
        "\"Contract would fail - rate did not improve sufficiently\""
      ]
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    },
    "414": {
      "block": "simulate_settlement_else_body@2",
      "stack_in": [],
      "op": "pushbytes \"Contract would succeed - rate improved as expected\"",
      "defined_out": [
        "\"Contract would succeed - rate improved as expected\""
      ],
      "stack_out": [
        "\"Contract would succeed - rate improved as expected\""
      ]
    },
    "466": {
      "retsub": true,
      "op": "retsub"
    },
    "467": {
      "subroutine": "smart_contracts.fx_hedge.contract.FXHedgeContract.calculate_payout",
      "params": {
        "target_rate#0": "uint64",
        "actual_rate#0": "uint64",
        "notional_amount#0": "uint64"
      },
      "block": "calculate_payout",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "470": {
      "op": "frame_dig -2",
      "defined_out": [
        "actual_rate#0 (copy)"
      ],
      "stack_out": [
        "actual_rate#0 (copy)"
      ]
    },
    "472": {
      "op": "frame_dig -3",
      "defined_out": [
        "actual_rate#0 (copy)",
        "target_rate#0 (copy)"
      ],
      "stack_out": [
        "actual_rate#0 (copy)",
        "target_rate#0 (copy)"
      ]
    },
    "474": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "bz calculate_payout_after_if_else@2",
      "stack_out": []
    },
    "478": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "479": {
      "retsub": true,
      "op": "retsub"
    },
    "480": {
      "block": "calculate_payout_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "actual_rate#0 (copy)"
      ],
      "stack_out": [
        "actual_rate#0 (copy)"
      ]
    },
    "482": {
      "op": "frame_dig -3",
      "defined_out": [
        "actual_rate#0 (copy)",
        "target_rate#0 (copy)"
      ],
      "stack_out": [
        "actual_rate#0 (copy)",
        "target_rate#0 (copy)"
      ]
    },
    "484": {
      "op": "-",
      "defined_out": [
        "rate_improvement#0"
      ],
      "stack_out": [
        "rate_improvement#0"
      ]
    },
    "485": {
      "op": "frame_dig -1",
      "defined_out": [
        "notional_amount#0 (copy)",
        "rate_improvement#0"
      ],
      "stack_out": [
        "rate_improvement#0",
        "notional_amount#0 (copy)"
      ]
    },
    "487": {
      "op": "intc_1 // 10000",
      "defined_out": [
        "10000",
        "notional_amount#0 (copy)",
        "rate_improvement#0"
      ],
      "stack_out": [
        "rate_improvement#0",
        "notional_amount#0 (copy)",
        "10000"
      ]
    },
    "488": {
      "op": "*",
      "defined_out": [
        "notional_scaled#0",
        "rate_improvement#0"
      ],
      "stack_out": [
        "rate_improvement#0",
        "notional_scaled#0"
      ]
    },
    "489": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "490": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%1#0",
        "target_rate#0 (copy)"
      ]
    },
    "492": {
      "op": "intc_1 // 10000",
      "stack_out": [
        "tmp%1#0",
        "target_rate#0 (copy)",
        "10000"
      ]
    },
    "493": {
      "op": "*",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "494": {
      "op": "/",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0"
      ]
    },
    "495": {
      "retsub": true,
      "op": "retsub"
    },
    "496": {
      "subroutine": "smart_contracts.fx_hedge.contract.FXHedgeContract.convert_rate_to_decimal",
      "params": {
        "rate_scaled#0": "uint64"
      },
      "block": "convert_rate_to_decimal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "499": {
      "op": "frame_dig -1",
      "defined_out": [
        "rate_scaled#0 (copy)"
      ],
      "stack_out": [
        "rate_scaled#0 (copy)"
      ]
    },
    "501": {
      "op": "intc_1 // 10000",
      "defined_out": [
        "10000",
        "rate_scaled#0 (copy)"
      ],
      "stack_out": [
        "rate_scaled#0 (copy)",
        "10000"
      ]
    },
    "502": {
      "op": "/",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "503": {
      "retsub": true,
      "op": "retsub"
    }
  }
}