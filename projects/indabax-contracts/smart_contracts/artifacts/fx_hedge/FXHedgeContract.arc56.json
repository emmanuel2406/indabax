{
    "name": "FXHedgeContract",
    "structs": {},
    "methods": [
        {
            "name": "create_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "baseline_rate"
                },
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new FX hedging contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_premium",
            "args": [
                {
                    "type": "uint64",
                    "name": "notional_amount"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate the premium amount (3% of notional)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "simulate_settlement",
            "args": [
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "actual_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Simulate contract settlement based on rates",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_payout",
            "args": [
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "actual_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate the payout amount if contract succeeds",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_summary",
            "args": [
                {
                    "type": "uint64",
                    "name": "baseline_rate"
                },
                {
                    "type": "uint64",
                    "name": "target_rate"
                },
                {
                    "type": "uint64",
                    "name": "notional_amount"
                },
                {
                    "type": "uint64",
                    "name": "duration_days"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get a summary of contract parameters",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "convert_rate_to_decimal",
            "args": [
                {
                    "type": "uint64",
                    "name": "rate_scaled"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper method to convert scaled rate back to decimal representation",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "FX Hedging Smart Contract for SME currency risk management",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "Baseline rate must be positive"
                },
                {
                    "pc": [
                        300
                    ],
                    "errorMessage": "Duration must be positive"
                },
                {
                    "pc": [
                        297
                    ],
                    "errorMessage": "Notional amount must be positive"
                },
                {
                    "pc": [
                        73,
                        94,
                        152,
                        181,
                        217,
                        238
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        294
                    ],
                    "errorMessage": "Target rate must be positive"
                },
                {
                    "pc": [
                        283
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        76,
                        97,
                        155,
                        184,
                        220,
                        241
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAZBOACYBBBUffHUxG0EBAIIGBNZIVxgEFvfoJARJ/ixGBAjHchkEek5wowRphO4fNhoAjgYApwCSAG4AUQAXAAIkQzEZFEQxGEQ2GgEXiAGcFihMULAiQzEZFEQxGESALhUffHUAKENvbnRyYWN0IHN1bW1hcnkgY2FsY3VsYXRlZCBzdWNjZXNzZnVsbHmwIkMxGRREMRhENhoBFzYaAhc2GgMXiAEoFihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAJFJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXiABpFihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiAAZSRUWVwYCTFAoTFCwIkMxGUD/LDEYFEQiQ4oEAYv8RIv9RIv+RIv/RIAdQ29udHJhY3QgY3JlYXRlZCBzdWNjZXNzZnVsbHmJigEBi/+BAwuBZAqJigMBi/6L/Q5BADqAN0NvbnRyYWN0IHdvdWxkIGZhaWwgLSByYXRlIGRpZCBub3QgaW1wcm92ZSBzdWZmaWNpZW50bHmJgDJDb250cmFjdCB3b3VsZCBzdWNjZWVkIC0gcmF0ZSBpbXByb3ZlZCBhcyBleHBlY3RlZImKAwGL/ov9DkEAAiSJi/6L/QmL/yMLC4v9IwsKiYoBAYv/IwqJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}