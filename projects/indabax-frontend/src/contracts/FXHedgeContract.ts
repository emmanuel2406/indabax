/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"FXHedgeContract","structs":{},"methods":[{"name":"create_contract","args":[{"type":"uint64","name":"baseline_rate"},{"type":"uint64","name":"target_rate"},{"type":"uint64","name":"notional_amount"},{"type":"uint64","name":"duration_days"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new FX hedging contract","events":[],"recommendations":{}},{"name":"calculate_premium","args":[{"type":"uint64","name":"notional_amount"},{"type":"uint64","name":"target_rate"},{"type":"uint64","name":"duration_days"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate the premium amount using a sophisticated insurance formula\nIn deployment, these values will be adaptive and estimated from historical data of the user","events":[],"recommendations":{}},{"name":"simulate_settlement","args":[{"type":"uint64","name":"target_rate"},{"type":"uint64","name":"actual_rate"},{"type":"uint64","name":"notional_amount"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simulate contract settlement based on rates","events":[],"recommendations":{}},{"name":"calculate_payout","args":[{"type":"uint64","name":"target_rate"},{"type":"uint64","name":"actual_rate"},{"type":"uint64","name":"notional_amount"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate the payout amount if contract succeeds","events":[],"recommendations":{}},{"name":"get_contract_summary","args":[{"type":"uint64","name":"baseline_rate"},{"type":"uint64","name":"target_rate"},{"type":"uint64","name":"notional_amount"},{"type":"uint64","name":"duration_days"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get a summary of contract parameters","events":[],"recommendations":{}},{"name":"convert_rate_to_decimal","args":[{"type":"uint64","name":"rate_scaled"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Helper method to convert scaled rate back to decimal representation","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"FX Hedging Smart Contract for SME currency risk management - Updated with sophisticated premium calculation","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[281],"errorMessage":"Baseline rate must be positive"},{"pc":[290],"errorMessage":"Duration must be positive"},{"pc":[287],"errorMessage":"Notional amount must be positive"},{"pc":[73,94,134,163,199,228],"errorMessage":"OnCompletion is not NoOp"},{"pc":[284],"errorMessage":"Target rate must be positive"},{"pc":[273],"errorMessage":"can only call when creating"},{"pc":[76,97,137,166,202,231],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAQCQTiYBBBUffHUxG0EA9oIGBNZIVxgEcjcT0wRJ/ixGBAjHchkEek5wowRphO4fNhoAjgYAnQCAAFwAPwAXAAIjQzEZFEQxGEQ2GgEXiAI7FihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiAHiSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBFzYaAhc2GgMXiAGjFihMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAQxJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAHMWKExQsCJDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIABlJFRZXBgJMUChMULAiQzEZQP82MRgURCJDigQBi/xEi/1Ei/5Ei/9Ei/6L/Iv/iAAhSIAdQ29udHJhY3QgY3JlYXRlZCBzdWNjZXNzZnVsbHmJigMBgABHA4v/JAuB7QIKSUAAGSOL/YH0HAuBxBMLC4v+C4GAyK+gJQqMAIkijACLBIwCiwCLAg5BADWLAIsCCIECCkmMAUkLSYwDiwQSQQAFiwFC/76LA4sEDEEACYsBIgiMAEL/zIsBIgmMAkL/w4sCQv+figMBi/6L/Q5BADqAN0NvbnRyYWN0IHdvdWxkIGZhaWwgLSByYXRlIGRpZCBub3QgaW1wcm92ZSBzdWZmaWNpZW50bHmJgDJDb250cmFjdCB3b3VsZCBzdWNjZWVkIC0gcmF0ZSBpbXByb3ZlZCBhcyBleHBlY3RlZImKAwGL/ov9DkEAAiOJi/6L/QmL/wuL/SQLComKBAGL/ov8i/+I/upIgChDb250cmFjdCBzdW1tYXJ5IGNhbGN1bGF0ZWQgc3VjY2Vzc2Z1bGx5iYoBAYv/JAqJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the FxHedgeContract contract
 */
export type FxHedgeContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_contract(uint64,uint64,uint64,uint64)string': {
      baselineRate: bigint | number
      targetRate: bigint | number
      notionalAmount: bigint | number
      durationDays: bigint | number
    }
    'calculate_premium(uint64,uint64,uint64)uint64': {
      notionalAmount: bigint | number
      targetRate: bigint | number
      durationDays: bigint | number
    }
    'simulate_settlement(uint64,uint64,uint64)string': {
      targetRate: bigint | number
      actualRate: bigint | number
      notionalAmount: bigint | number
    }
    'calculate_payout(uint64,uint64,uint64)uint64': {
      targetRate: bigint | number
      actualRate: bigint | number
      notionalAmount: bigint | number
    }
    'get_contract_summary(uint64,uint64,uint64,uint64)string': {
      baselineRate: bigint | number
      targetRate: bigint | number
      notionalAmount: bigint | number
      durationDays: bigint | number
    }
    'convert_rate_to_decimal(uint64)uint64': {
      rateScaled: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_contract(uint64,uint64,uint64,uint64)string': [baselineRate: bigint | number, targetRate: bigint | number, notionalAmount: bigint | number, durationDays: bigint | number]
    'calculate_premium(uint64,uint64,uint64)uint64': [notionalAmount: bigint | number, targetRate: bigint | number, durationDays: bigint | number]
    'simulate_settlement(uint64,uint64,uint64)string': [targetRate: bigint | number, actualRate: bigint | number, notionalAmount: bigint | number]
    'calculate_payout(uint64,uint64,uint64)uint64': [targetRate: bigint | number, actualRate: bigint | number, notionalAmount: bigint | number]
    'get_contract_summary(uint64,uint64,uint64,uint64)string': [baselineRate: bigint | number, targetRate: bigint | number, notionalAmount: bigint | number, durationDays: bigint | number]
    'convert_rate_to_decimal(uint64)uint64': [rateScaled: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FxHedgeContractReturns = {
  'create_contract(uint64,uint64,uint64,uint64)string': string
  'calculate_premium(uint64,uint64,uint64)uint64': bigint
  'simulate_settlement(uint64,uint64,uint64)string': string
  'calculate_payout(uint64,uint64,uint64)uint64': bigint
  'get_contract_summary(uint64,uint64,uint64,uint64)string': string
  'convert_rate_to_decimal(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the FxHedgeContract smart contract.
 */
export type FxHedgeContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_contract(uint64,uint64,uint64,uint64)string' | 'create_contract', {
      argsObj: FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string']
      argsTuple: FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']
      returns: FxHedgeContractReturns['create_contract(uint64,uint64,uint64,uint64)string']
    }>
    & Record<'calculate_premium(uint64,uint64,uint64)uint64' | 'calculate_premium', {
      argsObj: FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64']
      argsTuple: FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']
      returns: FxHedgeContractReturns['calculate_premium(uint64,uint64,uint64)uint64']
    }>
    & Record<'simulate_settlement(uint64,uint64,uint64)string' | 'simulate_settlement', {
      argsObj: FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string']
      argsTuple: FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']
      returns: FxHedgeContractReturns['simulate_settlement(uint64,uint64,uint64)string']
    }>
    & Record<'calculate_payout(uint64,uint64,uint64)uint64' | 'calculate_payout', {
      argsObj: FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64']
      argsTuple: FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']
      returns: FxHedgeContractReturns['calculate_payout(uint64,uint64,uint64)uint64']
    }>
    & Record<'get_contract_summary(uint64,uint64,uint64,uint64)string' | 'get_contract_summary', {
      argsObj: FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string']
      argsTuple: FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']
      returns: FxHedgeContractReturns['get_contract_summary(uint64,uint64,uint64,uint64)string']
    }>
    & Record<'convert_rate_to_decimal(uint64)uint64' | 'convert_rate_to_decimal', {
      argsObj: FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64']
      argsTuple: FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']
      returns: FxHedgeContractReturns['convert_rate_to_decimal(uint64)uint64']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type FxHedgeContractSignatures = keyof FxHedgeContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FxHedgeContractNonVoidMethodSignatures = keyof FxHedgeContractTypes['methods'] extends infer T ? T extends keyof FxHedgeContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FxHedgeContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FxHedgeContractSignatures> = FxHedgeContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FxHedgeContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FxHedgeContractSignatures> = FxHedgeContractTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type FxHedgeContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FxHedgeContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FxHedgeContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FxHedgeContract smart contract
 */
export abstract class FxHedgeContractParamsFactory {
  /**
   * Constructs a no op call for the create_contract(uint64,uint64,uint64,uint64)string ABI method
   *
   * Create a new FX hedging contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createContract(params: CallParams<FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_contract(uint64,uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.baselineRate, params.args.targetRate, params.args.notionalAmount, params.args.durationDays],
    }
  }
  /**
   * Constructs a no op call for the calculate_premium(uint64,uint64,uint64)uint64 ABI method
   *
  * Calculate the premium amount using a sophisticated insurance formula
  In deployment, these values will be adaptive and estimated from historical data of the user

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePremium(params: CallParams<FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_premium(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.notionalAmount, params.args.targetRate, params.args.durationDays],
    }
  }
  /**
   * Constructs a no op call for the simulate_settlement(uint64,uint64,uint64)string ABI method
   *
   * Simulate contract settlement based on rates
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static simulateSettlement(params: CallParams<FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'simulate_settlement(uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.targetRate, params.args.actualRate, params.args.notionalAmount],
    }
  }
  /**
   * Constructs a no op call for the calculate_payout(uint64,uint64,uint64)uint64 ABI method
   *
   * Calculate the payout amount if contract succeeds
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePayout(params: CallParams<FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_payout(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.targetRate, params.args.actualRate, params.args.notionalAmount],
    }
  }
  /**
   * Constructs a no op call for the get_contract_summary(uint64,uint64,uint64,uint64)string ABI method
   *
   * Get a summary of contract parameters
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractSummary(params: CallParams<FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_contract_summary(uint64,uint64,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.baselineRate, params.args.targetRate, params.args.notionalAmount, params.args.durationDays],
    }
  }
  /**
   * Constructs a no op call for the convert_rate_to_decimal(uint64)uint64 ABI method
   *
   * Helper method to convert scaled rate back to decimal representation
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static convertRateToDecimal(params: CallParams<FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64'] | FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'convert_rate_to_decimal(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rateScaled],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FXHedgeContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FxHedgeContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FxHedgeContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FxHedgeContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FxHedgeContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FXHedgeContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FxHedgeContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FxHedgeContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FXHedgeContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FXHedgeContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FXHedgeContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FxHedgeContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FXHedgeContract smart contract
 */
export class FxHedgeContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FxHedgeContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FxHedgeContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FxHedgeContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FxHedgeContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FxHedgeContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FxHedgeContractClient> {
    return new FxHedgeContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FxHedgeContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FxHedgeContractClient> {
    return new FxHedgeContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FXHedgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `create_contract(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Create a new FX hedging contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createContract: (params: CallParams<FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FxHedgeContractParamsFactory.createContract(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `calculate_premium(uint64,uint64,uint64)uint64` ABI method.
     *
    * Calculate the premium amount using a sophisticated insurance formula
    In deployment, these values will be adaptive and estimated from historical data of the user

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculatePremium: (params: CallParams<FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FxHedgeContractParamsFactory.calculatePremium(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `simulate_settlement(uint64,uint64,uint64)string` ABI method.
     *
     * Simulate contract settlement based on rates
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    simulateSettlement: (params: CallParams<FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FxHedgeContractParamsFactory.simulateSettlement(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `calculate_payout(uint64,uint64,uint64)uint64` ABI method.
     *
     * Calculate the payout amount if contract succeeds
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculatePayout: (params: CallParams<FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FxHedgeContractParamsFactory.calculatePayout(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `get_contract_summary(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Get a summary of contract parameters
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractSummary: (params: CallParams<FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FxHedgeContractParamsFactory.getContractSummary(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `convert_rate_to_decimal(uint64)uint64` ABI method.
     *
     * Helper method to convert scaled rate back to decimal representation
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    convertRateToDecimal: (params: CallParams<FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64'] | FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FxHedgeContractParamsFactory.convertRateToDecimal(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FXHedgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `create_contract(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Create a new FX hedging contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createContract: (params: CallParams<FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FxHedgeContractParamsFactory.createContract(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `calculate_premium(uint64,uint64,uint64)uint64` ABI method.
     *
    * Calculate the premium amount using a sophisticated insurance formula
    In deployment, these values will be adaptive and estimated from historical data of the user

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculatePremium: (params: CallParams<FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FxHedgeContractParamsFactory.calculatePremium(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `simulate_settlement(uint64,uint64,uint64)string` ABI method.
     *
     * Simulate contract settlement based on rates
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    simulateSettlement: (params: CallParams<FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FxHedgeContractParamsFactory.simulateSettlement(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `calculate_payout(uint64,uint64,uint64)uint64` ABI method.
     *
     * Calculate the payout amount if contract succeeds
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculatePayout: (params: CallParams<FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FxHedgeContractParamsFactory.calculatePayout(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `get_contract_summary(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Get a summary of contract parameters
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractSummary: (params: CallParams<FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FxHedgeContractParamsFactory.getContractSummary(params))
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `convert_rate_to_decimal(uint64)uint64` ABI method.
     *
     * Helper method to convert scaled rate back to decimal representation
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    convertRateToDecimal: (params: CallParams<FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64'] | FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FxHedgeContractParamsFactory.convertRateToDecimal(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FXHedgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `create_contract(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Create a new FX hedging contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createContract: async (params: CallParams<FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FxHedgeContractParamsFactory.createContract(params))
      return {...result, return: result.return as unknown as (undefined | FxHedgeContractReturns['create_contract(uint64,uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `calculate_premium(uint64,uint64,uint64)uint64` ABI method.
     *
    * Calculate the premium amount using a sophisticated insurance formula
    In deployment, these values will be adaptive and estimated from historical data of the user

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculatePremium: async (params: CallParams<FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FxHedgeContractParamsFactory.calculatePremium(params))
      return {...result, return: result.return as unknown as (undefined | FxHedgeContractReturns['calculate_premium(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `simulate_settlement(uint64,uint64,uint64)string` ABI method.
     *
     * Simulate contract settlement based on rates
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    simulateSettlement: async (params: CallParams<FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FxHedgeContractParamsFactory.simulateSettlement(params))
      return {...result, return: result.return as unknown as (undefined | FxHedgeContractReturns['simulate_settlement(uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `calculate_payout(uint64,uint64,uint64)uint64` ABI method.
     *
     * Calculate the payout amount if contract succeeds
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculatePayout: async (params: CallParams<FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FxHedgeContractParamsFactory.calculatePayout(params))
      return {...result, return: result.return as unknown as (undefined | FxHedgeContractReturns['calculate_payout(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `get_contract_summary(uint64,uint64,uint64,uint64)string` ABI method.
     *
     * Get a summary of contract parameters
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractSummary: async (params: CallParams<FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FxHedgeContractParamsFactory.getContractSummary(params))
      return {...result, return: result.return as unknown as (undefined | FxHedgeContractReturns['get_contract_summary(uint64,uint64,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the FXHedgeContract smart contract using the `convert_rate_to_decimal(uint64)uint64` ABI method.
     *
     * Helper method to convert scaled rate back to decimal representation
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    convertRateToDecimal: async (params: CallParams<FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64'] | FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FxHedgeContractParamsFactory.convertRateToDecimal(params))
      return {...result, return: result.return as unknown as (undefined | FxHedgeContractReturns['convert_rate_to_decimal(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FxHedgeContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current FXHedgeContract app
   */
  state = {
  }

  public newGroup(): FxHedgeContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_contract(uint64,uint64,uint64,uint64)string method call against the FXHedgeContract contract
       */
      createContract(params: CallParams<FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_contract(uint64,uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a calculate_premium(uint64,uint64,uint64)uint64 method call against the FXHedgeContract contract
       */
      calculatePremium(params: CallParams<FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculatePremium(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_premium(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a simulate_settlement(uint64,uint64,uint64)string method call against the FXHedgeContract contract
       */
      simulateSettlement(params: CallParams<FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.simulateSettlement(params)))
        resultMappers.push((v) => client.decodeReturnValue('simulate_settlement(uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a calculate_payout(uint64,uint64,uint64)uint64 method call against the FXHedgeContract contract
       */
      calculatePayout(params: CallParams<FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculatePayout(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_payout(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_contract_summary(uint64,uint64,uint64,uint64)string method call against the FXHedgeContract contract
       */
      getContractSummary(params: CallParams<FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractSummary(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_contract_summary(uint64,uint64,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a convert_rate_to_decimal(uint64)uint64 method call against the FXHedgeContract contract
       */
      convertRateToDecimal(params: CallParams<FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64'] | FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.convertRateToDecimal(params)))
        resultMappers.push((v) => client.decodeReturnValue('convert_rate_to_decimal(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the FXHedgeContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FxHedgeContractComposer
  }
}
export type FxHedgeContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_contract(uint64,uint64,uint64,uint64)string ABI method.
   *
   * Create a new FX hedging contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createContract(params?: CallParams<FxHedgeContractArgs['obj']['create_contract(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['create_contract(uint64,uint64,uint64,uint64)string']>): FxHedgeContractComposer<[...TReturns, FxHedgeContractReturns['create_contract(uint64,uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the calculate_premium(uint64,uint64,uint64)uint64 ABI method.
   *
  * Calculate the premium amount using a sophisticated insurance formula
  In deployment, these values will be adaptive and estimated from historical data of the user

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePremium(params?: CallParams<FxHedgeContractArgs['obj']['calculate_premium(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_premium(uint64,uint64,uint64)uint64']>): FxHedgeContractComposer<[...TReturns, FxHedgeContractReturns['calculate_premium(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the simulate_settlement(uint64,uint64,uint64)string ABI method.
   *
   * Simulate contract settlement based on rates
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  simulateSettlement(params?: CallParams<FxHedgeContractArgs['obj']['simulate_settlement(uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['simulate_settlement(uint64,uint64,uint64)string']>): FxHedgeContractComposer<[...TReturns, FxHedgeContractReturns['simulate_settlement(uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the calculate_payout(uint64,uint64,uint64)uint64 ABI method.
   *
   * Calculate the payout amount if contract succeeds
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePayout(params?: CallParams<FxHedgeContractArgs['obj']['calculate_payout(uint64,uint64,uint64)uint64'] | FxHedgeContractArgs['tuple']['calculate_payout(uint64,uint64,uint64)uint64']>): FxHedgeContractComposer<[...TReturns, FxHedgeContractReturns['calculate_payout(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the get_contract_summary(uint64,uint64,uint64,uint64)string ABI method.
   *
   * Get a summary of contract parameters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractSummary(params?: CallParams<FxHedgeContractArgs['obj']['get_contract_summary(uint64,uint64,uint64,uint64)string'] | FxHedgeContractArgs['tuple']['get_contract_summary(uint64,uint64,uint64,uint64)string']>): FxHedgeContractComposer<[...TReturns, FxHedgeContractReturns['get_contract_summary(uint64,uint64,uint64,uint64)string'] | undefined]>

  /**
   * Calls the convert_rate_to_decimal(uint64)uint64 ABI method.
   *
   * Helper method to convert scaled rate back to decimal representation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  convertRateToDecimal(params?: CallParams<FxHedgeContractArgs['obj']['convert_rate_to_decimal(uint64)uint64'] | FxHedgeContractArgs['tuple']['convert_rate_to_decimal(uint64)uint64']>): FxHedgeContractComposer<[...TReturns, FxHedgeContractReturns['convert_rate_to_decimal(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FXHedgeContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FxHedgeContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FxHedgeContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FxHedgeContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FxHedgeContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FxHedgeContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FxHedgeContractComposerResults<TReturns>>
}
export type FxHedgeContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

